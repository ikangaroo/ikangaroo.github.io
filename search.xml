<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python实用的内置库函数]]></title>
    <url>%2F2019%2F04%2F03%2FPython%E5%AE%9E%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E5%BA%93%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[记录一些经常碰到，并且实用的Python标准库或者第三方库 Standard Libraryfunctools@functools.lru_cache(maxsize=128, typed=False)&#8195;&#8195;作为装饰器，它的作用主要用来做缓存，可以把之前函数调用的结果保存起来，避免重复运算，并且可以设置缓存的大小、清空缓存 maxize = None，表示此时缓存可以无限增加 cache_info()，可以用来查看当前缓存信息 cache_clear()，可以清空当前缓存中的内容 hits 表示在缓存中找到的次数，misses 表示未在缓存中的次数 1234567891011121314151617181920212223242526272829303132333435from functools import lru_cache@lru_cache(None)def fib(n): if n &lt; 2: return n return fib(n-1) + fib(n-2)def fib2(n): if n &lt; 2: return n return fib2(n-1) + fib2(n-2)a = time.clock()[fib(n) for n in range(30)]b = time.clock()print(b-a)a = time.clock()[fib2(n) for n in range(30)]b = time.clock()print(b-a)----------------------------0.00016000000000104820.5012759999999972fib.cache_info()-----------------------------CacheInfo(hits=56, misses=30, maxsize=None, currsize=30)fib.cache_clear()fib.cache_info()-----------------------------CacheInfo(hits=0, misses=0, maxsize=None, currsize=0)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>库函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Books]]></title>
    <url>%2F2019%2F01%2F03%2FBooks%2F</url>
    <content type="text"><![CDATA[一些关于机器学习和深度学习的书籍 To Read Pattern Recognition and Machine Learning Reading Deep Learning with Python Hands-On Machine Learning with Scikit-Learn &amp; TensorFLow Deep Learning DoneOthers Python for Data Analysis]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Books</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SSR配置]]></title>
    <url>%2F2018%2F12%2F27%2FSSR%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Ubuntu科学上网 使用GUI客户端下载electron-ssr最新的deb安装包，使用下面命令安装 1sudo dpkg -i electron-ssr-0.2.5.deb 然后在GUI中选择服务器-&gt;订阅管理-&gt;直接添加订阅地址 chrome浏览器添加Proxy SwitchyOmega插件，简单设置即可。 终端走代理方法1在终端运行命令 1export http_proxy=http://localhost:port 只对当前终端有效 方法2把代理服务器地址写入shell配置文件.bashrc或者.zshrc12export http_proxy="http://localhost:port"export https_proxy="http://localhost:port" 保存后运行123source ~/.bashrc或者source ~/.zshrc 如何在Ubuntu上搭建使用SSR梯子 使用命令行 配置.json文件 端口设置 12sslocal -c /etc/shadowsocks.jsonsudo /etc/init.d/privoxy start 相对于第一种太麻烦，放弃]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>ShadowsocksR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[零碎知识点]]></title>
    <url>%2F2018%2F11%2F27%2F%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[本篇文章，将持续记录日常遇到的一些小知识点。 Foreign function interface由一种语言编写的代码，通过这种机制可以被其他语言所调用。通俗一点：比如之前用C实现了一个复杂的功能，但现在项目需要用Java完成。此时我们不需要重新造轮子，而是使用JNI技术(不同语言中FFI的叫法不同)，直接在Java中调用已经用C完成的代码。 相关链接：Foreign function interface、SWIG、What is language bingding?、Language binding Glue Code是自定义编写的程序，用于连接不兼容的软件组建。由胶水语言编写的胶水代码不实现程序要求的任何功能。常见的胶水语言：JavaScript、Perl、PHP、Python、Ruby等等。 比如Python很多模板中的功能使用C/C++实现的Python中调用C代码最简单的方法是用模块：ctypes 相关链接：Glue Code、What does Glue Language mean?、What is Glue Language GILGlobal Interpreter Lock，全局变量锁。作用是，限制多线程同时执行，保证同一时间内只有一个线程在执行。因为同一进程里线程是数据共享的，数据可能会同时被多个线程占用，造成数据混乱。GIL并不是Python的特性，而是因为历史原因，在实现Python解析器(CPython)时引入的概念，Python完全可以不依赖于GIL。Pyhon有多种解释器，比如常见的: CPython(基于C编写)IPython(基于CPython的交互式解释器)PyPy(采用JIT技术，提高代码执行速度)Jython(基于Java编写)IronPython(基于C#编写)。 像其中的Jython就没有GIL。 影响 Python的多线程在多核CPU上，只对于IO密集型计算产生正面效果；而当有至少有一个CPU密集型线程存在，那么多线程效率会由于GIL而大幅下降。 解决方案 使用多进程$+$协程的方法 换用其他的解释器。 将关键部分用C/C++写成Python扩展，利用ctypes绕过GIL。(ctypes会在调用C函数前释放GIL) 相关链接: Python中的GIL详解、Python线程，GIL和ctypes]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[P、NP、NPC]]></title>
    <url>%2F2018%2F11%2F22%2FP%E3%80%81NP%E3%80%81NPC%2F</url>
    <content type="text"><![CDATA[千禧年大奖难题一：$P=NP$? P问题 如果一个问题可以找到一个能在多项式的时间里解决它的算法，那么这个问题就属于P问题。 NP问题 可以在多项式的时间里验证一个解的问题。 NPC问题 B是NPC问题当且仅当：(1)B是NP问题；(2)存在一个已知的NPC问题A，A能规约到B。 NP-hard问题 仅满足NPC问题定义的第二条。 归约 如果能找到这样一个变化法则，对程序A的任意一个输入，都能按这个法则变换成程序B的输入，使这两个程序的输出相同，那么我们说，问题A可归约为问题B “问题A可归约为问题B”有一个重要的直观意义：B的时间复杂度高于或者等于A的时间复杂度。一个问题归约为另一个问题，时间复杂度增加了，问题的应用范围也增大了。 NPC证明证明问题B是NPC问题的步骤： 证明B是NP问题 选择一个已知的NPC问题A 证明A可以归约到B 一些理解 通过归约的定义，可以联想到，如果我们对某些问题不断归约，我们能够不断寻找复杂度更高，但应用范围更广的算法来代替复杂度虽然低，但只能用于很小的一类问题的算法。 如果不断地约化上去，不断找到能“通吃”若干小NP问题的一个稍复杂的大NP问题，那么最后是否有可能找到一个时间复杂度最高，并且能“通吃”所有NP问题的这样一个超级NP问题，即NPC问题。 由一个NPC问题可以推导出其他的NPC问题，但如果只要任意一个NPC问题找到了一个多项式的算法，那么所有的NP问题都能用这个算法解决了，NP也就等于P了。 更详细内容参考文章: 什么是P问题、NP问题和NPC问题P问题、NP问题、NPC问题的概念及实例证明]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[随机游走算法]]></title>
    <url>%2F2018%2F11%2F21%2F%E9%9A%8F%E6%9C%BA%E6%B8%B8%E8%B5%B0%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[随机游走（random walk）也称随机漫步，随机行走等是指基于过去的表现，无法预测将来的发展步骤和方向。核心概念是指任何无规则行走者所带的守恒量都各自对应着一个扩散运输定律 ，接近于布朗运动，是布朗运动理想的数学状态。 随机游走算法操作步骤设$f(x)$是一个含有$n$个变量得多元函数，$x=(x_{1},x_{2},…,x_{n})$为$n$维向量。 给定初始迭代点$x$， 初次行走步长$λ$，控制精度$ϵ$ 给定迭代控制次数$N$，$k$为当前迭代次数，置$k=1$ 当$k&lt;N$时，随机生成一个$(-1, 1)$之间得$n$维向量$u=(u_{1},u_{2},….,u_{n})$，$(-1&lt;u_{i}&lt;1,i=1,2,…,n)$,并将其标准化得到$u’= \frac{u}{\sqrt{\sum_{i=1}^{n}u_{i}^2}}$。令$x_{1}=x+λu’$，完成第一步游走。 计算函数值，如果$f(x_{1})&lt;{f(x)}$，即找到了一个比初始值好的点，那么$k$重新置为1，将$x_{1}$变为$x$，回到第2步；否则$k=k+1$,回到第3步。 如果连续$N$次都找不到更优的值，则认为,最优解就在以当前最优解为中心，当前步长为半径的$N$维球内。此时，如果$λ&lt;ϵ$，则结束算法；否则，令$λ=\frac{λ}{2}$，回到第1步，开始新一轮游走。 Python代码实现测试函数$f(r)=\frac{sin(r)}r+1,r=\sqrt{(x-50)^2+(y-50)^2}+e,0\leq{x},y\leq100$。该函数是一个多峰函数，在在(50,50)处取得全局最大值1.1512，第二最大值在其全局最大值附近，采用一般的优化方法很容易陷入局部极大值点。这里是求解函数的最大值问题，可以将其转化为求目标函数的相反数的最小值问题 1234567891011121314151617181920212223242526272829303132333435363738import mathimport randomN = 100 # 迭代次数step = 0.5 # 初始步长epsilon = 0.00001variables = 2 #变量数目x = [49,49] # 初始化坐标walk_num = 1 # 初始化随机游走次数print("迭代次数:",N)print("初始步长:",step)print("epsilon:",epsilon)print("变量数目:",variables)# 定义目标函数def function(x): r = math.sqrt((x[0]-50)**2 + (x[1]-50)**2) + math.e f = math.sin(r)/r + 1 return -f# 开始随机游走while(step &gt; epsilon): k = 1 # 初始化计数器 while(k &lt; N): u = [random.uniform(-1,1) for i in range(variables)] # 随机向量 # u1 为标准化之后的随机向量 u1 = [u[i]/math.sqrt(sum([u[i]**2 for i in range(variables)])) for i in range(variables)] x1 = [x[i] + step*u1[i] for i in range(variables)] if(function(x1) &lt; function(x)): # 如果找到了更优点 k = 1 x = x1 else: k += 1 step = step/2 print("第%d次随机游走完成。" % walk_num) walk_num += 1print("随机游走次数:",walk_num-1)print("最终最优点:",x)print("最终最优值:",function(x)) 结果如下： 12345第15次随机游走完成。第16次随机游走完成。随机游走次数: 16最终最优点: [49.999995400843446, 49.999995175178015]最终最优值: -1.1511153853111016 重点步长的取值很关键，并且不同大小的步长对应的迭代次数也不同。最理想的方法是步长动态变化，开始时候较大，当接近最优解值时逐渐减小。]]></content>
      <categories>
        <category>Misc</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ROC曲线、AUC值]]></title>
    <url>%2F2018%2F11%2F20%2FROC%E6%9B%B2%E7%BA%BF%E3%80%81AUC%E5%80%BC%2F</url>
    <content type="text"><![CDATA[二分类问题在机器学习中是一个常见的问题。ROC曲线和AUC值常被用来评价一个二值分类器的优劣 二分类器计算出每个样本为正的概率。 以每个概率为阈值，大于阈值认为正样本，小于阈值认为负样本。分别计算出FPS和TPS。 以FPS为横坐标，TPS为纵坐标。 将步骤2计算得到的结果在坐标上画出，用线相连，即为ROC。 ROC曲线，x=1, y=0 所围成的面积，为AUC。 针对相同数据，AUC值大的分类器效果更好。 混淆矩阵对于二分类问题，可将样本根据其真实类别和学习器预测类别的组合划分为TP、FP、TN、FN四种情况： 真阳性(True Positive, TP): 检测不健康，且实际不健康； 正确肯定的匹配数目 假阳性(False Positive，FP)：检测不健康，但实际健康；误报，给出的匹配是不正确的 真阴性(True Negative，TN)：检测健康，且实际健康；正确拒绝的非匹配数目 假阴性(False Negative，FN)：检测健康，但实际不健康；漏报，没有正确找到的匹配的数目 $\text{accuracy} = \frac{TP+TN}{TP+TN+FP+FN}$ $\text{precision} = \frac{TP}{TP+FP}$ $\text{recall} = \frac{TP}{TP+FN}$ $F_1 = 2 \ast \frac{\text{precision} * \text{recall}}{\text{precision}+\text{recall}}$ ROC曲线接收者操作特征曲线(receiver operating characteristic curve)，是反映敏感性和特异性连续变量的综合指标，ROC曲线上每个点反映着对用一个信号刺激的感受性。 横轴 : 负正类率(false postive rate FPR)特异度，划分实例中所有负例占所有负例的比例；(1-Specificity)纵轴 : 真正类率(true postive rate TPR)灵敏度，Sensitivity(正类覆盖率) TPR: TP/(TP+FN): 代表分类器预测的正类中实际正实例占所有正实例的比例。Sensitivity FPR: FP/(FP+TN): 代表分类器预测的正类中实际负实例占所有负实例的比例。1-Specificity TNR: TN/(FP+TN): 代表分类器预测的负类中实际负实例占所有负实例的比例，TNR=1-FPR。Specificity 如下面这幅图，(a)图中实线为ROC曲线，线上每个点对应一个阈值： 阈值最大时，对应坐标为 (0,0)阈值最小时，对应坐标为 (1,1) 理想目标：TPR=1，FPR=0, 即图中(0,1)点，故ROC曲线越靠拢(0,1)点，越偏离45度对角线越好，Sensitivity、Specificity越大效果越好 AUCAUC(Area under Curve)：Roc曲线下的面积，介于0和1之间。 为什么AUC值越大，分类器的分类效果越好 当分类器效果很好时，例如，实际是正类，预测其为正类的概率都为0.8-0.9左右，实际为负类，预测其为正类的概率都为0.1-0.2，可想而知，当阈值有大变小时，有如下规律： FPS=0，TPS由接近于0的值变为接近于1 FPS=0，TPS=1 (相当于一个临界情况) FPS由接近于0的值变为接近于1的值，TPS=1 首先AUC值是一个概率值，当你随机挑选一个正样本以及负样本，当前的分类算法根据计算得到的Score值将这个正样本排在负样本前面的概率就是AUC值，AUC值越大，当前分类算法越有可能将正样本排在负样本前面，从而能够更好地分类。 ROC优点 当测试集中的正负样本的分布变换的时候，ROC曲线能够保持不变。 在实际的数据集中经常会出现样本类不平衡，即正负样本比例差距较大，而且测试数据中的正负样本也可能随着时间变化。 下图是ROC曲线和Presision-Recall曲线的对比：]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Virtualenv]]></title>
    <url>%2F2018%2F11%2F20%2FVirtualenv%2F</url>
    <content type="text"><![CDATA[Virtualenv 是一个创建隔绝Python环境的工具。Virtualenv创建一个包含所有必要的可执行文件的文件夹，用来使用Python工程所需的包。 安装1pip install virtualenv 创建虚拟环境12cd my_project_dirvirtualenv venv 激活虚拟环境1source venv/bin/activate 退出虚拟环境1deactivate 删除虚拟环境1rm -rf venv 创建环境时的一些参数 指定Python版本 1virtualenv -p /usr/bin/python3 py3env 不带任何第三方包 1virtualenv --no-site-packages venv]]></content>
      <categories>
        <category>Python虚拟环境</category>
      </categories>
      <tags>
        <tag>Python虚拟环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Hexo]]></title>
    <url>%2F2018%2F11%2F18%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[Hexo 常用的几个命令，介绍顺序即部署文件的指令顺序，有时候不需要hexo g。 Quick StartCreate a new post1$ hexo n "My New Post" hexo n 是 hexo new 的缩写，命令效果一致。 新建一篇标题为 My New Post的文章，因为标题中有空格，所有加上了双引号。 1$ hexo n page "aboutme" 新建一个标题为aboutme的页面，默认连接地址为主页地址/aboutme/。 页面不会出现在首页文章列表和归档中，也不支持设置分类和标签。 Run server1$ hexo s hexo s 是 hexo server 的缩写，命令效果一致。 启动本地服务器，用于预览主题。默认地址：http://localhost:4000 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可。 Clean1$ hexo clean 清除缓存文件 db.json 和已生成的静态文件 public。 Generate static files1$ hexo g hexo g 是 hexo generate 的缩写，命令效果一致。 生成网站静态文件到默认设置的public文件夹。 Deploy to remote sites1$ hexo d hexo d 是 hexo deploy 的缩写，命令效果一致。 自动生成网站静态文件，并部署到设定的仓库。 一般后两条合并执行hexo d -g]]></content>
      <categories>
        <category>介绍</category>
      </categories>
      <tags>
        <tag>介绍</tag>
      </tags>
  </entry>
</search>
